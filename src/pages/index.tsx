import { GetServerSideProps } from "next";
import Head from "next/head";
import update from 'immutability-helper'
import { useCallback, useState } from "react";
import NewTodoForm from "../components/NewTodoForm";
import TodoList from "../components/TodoList";

import { prisma } from "../server/db/client";

export type Todo = {
  index: number
  id: string;
  description: string;
  completed?: boolean;
  order?: number;
}

type HomeProps = {
  todos: Todo[]
}

const initialTodo = {
  index: 0,
  id: '',
  description: '',
  completed: false,
  created_at: '',
  order: 1
}

export default function Home(props: HomeProps) {
  const [todos, setTodos] = useState<Todo[]>(props.todos || []);
  const [todo, setTodo] = useState<Todo>(initialTodo);

  console.log('todos', todos)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    const { value } = e.currentTarget;
    value === ""
      ? setTodo(initialTodo)
      : setTodo((prevTodo) => ({ ...prevTodo, description: value }));
  };

  const moveTodo = useCallback((dragIndex: number, hoverIndex: number): void => {
    setTodos((prevTodos: Todo[]) =>
      update(prevTodos, {
        $splice: [
          [dragIndex, 1],
          [hoverIndex, 0, prevTodos[dragIndex] as Todo],
        ],
      }),
    )
  }, [])

  return (
    <>
      <Head>
        <title>Tod List App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="main">
        <h1 className="heading">TO-DO List</h1>
        <div className="container">
          <NewTodoForm handleChange={handleChange} todo={todo} order={todos.length} />
          <TodoList todos={todos} moveTodo={moveTodo} setTodo={setTodo} />
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  // @ts-ignore
  const data = await prisma.todos.findMany({
    orderBy: [
      {
        order: 'asc',
      },
    ],
  });
  return {
    props: {
      todos: JSON.parse(JSON.stringify(data, (key, value) => (typeof value === 'bigint' ? value.toString() : value))),
    },
  };
};
